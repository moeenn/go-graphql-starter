package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"api/db/models"
	"api/graph"
	"api/graph/gmodel"
	"api/helpers/jwt"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"golang.org/x/crypto/bcrypt"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input gmodel.CreateAccountInput) (*gmodel.CreateAccountResponse, error) {
	if input.Password != input.ConfirmPassword {
		return nil, errors.New("password confirmation failed")
	}

	passwordHash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	now := pgtype.Timestamp{
		Time:  time.Now(),
		Valid: true,
	}

	newUser := models.CreateUserParams{
		ID:        uuid.New(),
		Email:     input.Email,
		Password:  string(passwordHash),
		Role:      models.NullUserRole{UserRole: models.UserRoleUser, Valid: true},
		CreatedAt: now,
		UpdatedAt: now,
	}

	if err := r.DB.CreateUser(ctx, newUser); err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return &gmodel.CreateAccountResponse{
		Message: "Account created successfully",
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input gmodel.LoginInput) (*gmodel.LoginResponse, error) {

	user, err := r.DB.GetUserByEmail(ctx, input.Email)
	if err != nil {
		return nil, errors.New("invalid email or password")
	}

	if err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password)); err != nil {
		return nil, errors.New("invalid email or password")
	}

	token, expiry, err := jwt.NewExpiringToken(&jwt.ExpiringTokenArgs{
		UserId:        user.ID.String(),
		Email:         user.Email,
		JwtSecret:     r.Config.Auth.JwtSecret,
		ExpiryMinutes: r.Config.Auth.JwtExpiryMinutes,
	})

	if err != nil {
		return nil, fmt.Errorf("failed to generate JWT: %w", err)
	}

	res := &gmodel.LoginResponse{
		User: MapUserToResponse(&user),
		Token: &gmodel.UserToken{
			AccessToken: token,
			Expiry:      int32(expiry),
		},
	}

	return res, nil
}

// TODO: move to a differrent package.
func MapUserToResponse(user *models.User) *gmodel.User {
	status := gmodel.UserStatusActive
	if user.DeletedAt.Valid {
		status = gmodel.UserStatusInactive
	}

	return &gmodel.User{
		ID:        user.ID.String(),
		Email:     user.Email,
		Status:    status,
		CreatedAt: user.CreatedAt.Time.String(),
		UpdatedAt: user.UpdatedAt.Time.String(),
	}
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
