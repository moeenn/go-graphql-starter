// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queries.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
insert into users (id, email, password, role, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	Password  string
	Role      NullUserRole
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, email, password, role, created_at, updated_at, deleted_at, count(*) over() as total_count from users
limit $1
offset $2
`

type GetAllUsersParams struct {
	Limit  int32
	Offset int32
}

type GetAllUsersRow struct {
	ID         uuid.UUID
	Email      string
	Password   string
	Role       NullUserRole
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	DeletedAt  pgtype.Timestamp
	TotalCount int64
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, role, created_at, updated_at, deleted_at from users
where email = $1
and deleted_at is null
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const setUserDeletedStatus = `-- name: SetUserDeletedStatus :exec
update users
set deleted_at = $2
where id = $1
`

type SetUserDeletedStatusParams struct {
	ID        uuid.UUID
	DeletedAt pgtype.Timestamp
}

func (q *Queries) SetUserDeletedStatus(ctx context.Context, arg SetUserDeletedStatusParams) error {
	_, err := q.db.Exec(ctx, setUserDeletedStatus, arg.ID, arg.DeletedAt)
	return err
}
