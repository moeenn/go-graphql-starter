// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_queies.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :exec
insert into user (id, email, password, role, created_at, updated_at)
values (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID        string
	Email     string
	Password  string
	Role      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, role, created_at, updated_at, deleted_at from user
where email = ?
and deleted_at is null
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, email, password, role, created_at, updated_at, deleted_at from user
limit ?
offset ?
`

type GetUsersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserDeletedStatus = `-- name: SetUserDeletedStatus :exec
update user
set deleted_at = ?
where id = ?
`

type SetUserDeletedStatusParams struct {
	DeletedAt sql.NullTime
	ID        string
}

func (q *Queries) SetUserDeletedStatus(ctx context.Context, arg SetUserDeletedStatusParams) error {
	_, err := q.db.ExecContext(ctx, setUserDeletedStatus, arg.DeletedAt, arg.ID)
	return err
}
